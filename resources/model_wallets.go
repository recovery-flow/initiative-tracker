/*
test

example

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// checks if the Wallets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Wallets{}

// Wallets struct for Wallets
type Wallets struct {
	BankAccount *WalletsBankAccount `json:"bank_account,omitempty"`
	PaymentSystem *WalletsPaymentSystem `json:"payment_system,omitempty"`
	CryptoWallets *WalletsCryptoWallets `json:"crypto_wallets,omitempty"`
}

// NewWallets instantiates a new Wallets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWallets() *Wallets {
	this := Wallets{}
	return &this
}

// NewWalletsWithDefaults instantiates a new Wallets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletsWithDefaults() *Wallets {
	this := Wallets{}
	return &this
}

// GetBankAccount returns the BankAccount field value if set, zero value otherwise.
func (o *Wallets) GetBankAccount() WalletsBankAccount {
	if o == nil || IsNil(o.BankAccount) {
		var ret WalletsBankAccount
		return ret
	}
	return *o.BankAccount
}

// GetBankAccountOk returns a tuple with the BankAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallets) GetBankAccountOk() (*WalletsBankAccount, bool) {
	if o == nil || IsNil(o.BankAccount) {
		return nil, false
	}
	return o.BankAccount, true
}

// HasBankAccount returns a boolean if a field has been set.
func (o *Wallets) HasBankAccount() bool {
	if o != nil && !IsNil(o.BankAccount) {
		return true
	}

	return false
}

// SetBankAccount gets a reference to the given WalletsBankAccount and assigns it to the BankAccount field.
func (o *Wallets) SetBankAccount(v WalletsBankAccount) {
	o.BankAccount = &v
}

// GetPaymentSystem returns the PaymentSystem field value if set, zero value otherwise.
func (o *Wallets) GetPaymentSystem() WalletsPaymentSystem {
	if o == nil || IsNil(o.PaymentSystem) {
		var ret WalletsPaymentSystem
		return ret
	}
	return *o.PaymentSystem
}

// GetPaymentSystemOk returns a tuple with the PaymentSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallets) GetPaymentSystemOk() (*WalletsPaymentSystem, bool) {
	if o == nil || IsNil(o.PaymentSystem) {
		return nil, false
	}
	return o.PaymentSystem, true
}

// HasPaymentSystem returns a boolean if a field has been set.
func (o *Wallets) HasPaymentSystem() bool {
	if o != nil && !IsNil(o.PaymentSystem) {
		return true
	}

	return false
}

// SetPaymentSystem gets a reference to the given WalletsPaymentSystem and assigns it to the PaymentSystem field.
func (o *Wallets) SetPaymentSystem(v WalletsPaymentSystem) {
	o.PaymentSystem = &v
}

// GetCryptoWallets returns the CryptoWallets field value if set, zero value otherwise.
func (o *Wallets) GetCryptoWallets() WalletsCryptoWallets {
	if o == nil || IsNil(o.CryptoWallets) {
		var ret WalletsCryptoWallets
		return ret
	}
	return *o.CryptoWallets
}

// GetCryptoWalletsOk returns a tuple with the CryptoWallets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallets) GetCryptoWalletsOk() (*WalletsCryptoWallets, bool) {
	if o == nil || IsNil(o.CryptoWallets) {
		return nil, false
	}
	return o.CryptoWallets, true
}

// HasCryptoWallets returns a boolean if a field has been set.
func (o *Wallets) HasCryptoWallets() bool {
	if o != nil && !IsNil(o.CryptoWallets) {
		return true
	}

	return false
}

// SetCryptoWallets gets a reference to the given WalletsCryptoWallets and assigns it to the CryptoWallets field.
func (o *Wallets) SetCryptoWallets(v WalletsCryptoWallets) {
	o.CryptoWallets = &v
}

func (o Wallets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wallets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankAccount) {
		toSerialize["bank_account"] = o.BankAccount
	}
	if !IsNil(o.PaymentSystem) {
		toSerialize["payment_system"] = o.PaymentSystem
	}
	if !IsNil(o.CryptoWallets) {
		toSerialize["crypto_wallets"] = o.CryptoWallets
	}
	return toSerialize, nil
}

type NullableWallets struct {
	value *Wallets
	isSet bool
}

func (v NullableWallets) Get() *Wallets {
	return v.value
}

func (v *NullableWallets) Set(val *Wallets) {
	v.value = val
	v.isSet = true
}

func (v NullableWallets) IsSet() bool {
	return v.isSet
}

func (v *NullableWallets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWallets(val *Wallets) *NullableWallets {
	return &NullableWallets{value: val, isSet: true}
}

func (v NullableWallets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWallets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


