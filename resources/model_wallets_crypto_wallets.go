/*
test

example

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// checks if the WalletsCryptoWallets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletsCryptoWallets{}

// WalletsCryptoWallets struct for WalletsCryptoWallets
type WalletsCryptoWallets struct {
	// USDT wallet
	USDT *string `json:"USDT,omitempty"`
	// ETH wallet
	ETH *string `json:"ETH,omitempty"`
	// BTC wallet
	BTC *string `json:"BTC,omitempty"`
	// TON wallet
	TON *string `json:"TON,omitempty"`
	// SOL wallet
	SOL *string `json:"SOL,omitempty"`
}

// NewWalletsCryptoWallets instantiates a new WalletsCryptoWallets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletsCryptoWallets() *WalletsCryptoWallets {
	this := WalletsCryptoWallets{}
	return &this
}

// NewWalletsCryptoWalletsWithDefaults instantiates a new WalletsCryptoWallets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletsCryptoWalletsWithDefaults() *WalletsCryptoWallets {
	this := WalletsCryptoWallets{}
	return &this
}

// GetUSDT returns the USDT field value if set, zero value otherwise.
func (o *WalletsCryptoWallets) GetUSDT() string {
	if o == nil || IsNil(o.USDT) {
		var ret string
		return ret
	}
	return *o.USDT
}

// GetUSDTOk returns a tuple with the USDT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletsCryptoWallets) GetUSDTOk() (*string, bool) {
	if o == nil || IsNil(o.USDT) {
		return nil, false
	}
	return o.USDT, true
}

// HasUSDT returns a boolean if a field has been set.
func (o *WalletsCryptoWallets) HasUSDT() bool {
	if o != nil && !IsNil(o.USDT) {
		return true
	}

	return false
}

// SetUSDT gets a reference to the given string and assigns it to the USDT field.
func (o *WalletsCryptoWallets) SetUSDT(v string) {
	o.USDT = &v
}

// GetETH returns the ETH field value if set, zero value otherwise.
func (o *WalletsCryptoWallets) GetETH() string {
	if o == nil || IsNil(o.ETH) {
		var ret string
		return ret
	}
	return *o.ETH
}

// GetETHOk returns a tuple with the ETH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletsCryptoWallets) GetETHOk() (*string, bool) {
	if o == nil || IsNil(o.ETH) {
		return nil, false
	}
	return o.ETH, true
}

// HasETH returns a boolean if a field has been set.
func (o *WalletsCryptoWallets) HasETH() bool {
	if o != nil && !IsNil(o.ETH) {
		return true
	}

	return false
}

// SetETH gets a reference to the given string and assigns it to the ETH field.
func (o *WalletsCryptoWallets) SetETH(v string) {
	o.ETH = &v
}

// GetBTC returns the BTC field value if set, zero value otherwise.
func (o *WalletsCryptoWallets) GetBTC() string {
	if o == nil || IsNil(o.BTC) {
		var ret string
		return ret
	}
	return *o.BTC
}

// GetBTCOk returns a tuple with the BTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletsCryptoWallets) GetBTCOk() (*string, bool) {
	if o == nil || IsNil(o.BTC) {
		return nil, false
	}
	return o.BTC, true
}

// HasBTC returns a boolean if a field has been set.
func (o *WalletsCryptoWallets) HasBTC() bool {
	if o != nil && !IsNil(o.BTC) {
		return true
	}

	return false
}

// SetBTC gets a reference to the given string and assigns it to the BTC field.
func (o *WalletsCryptoWallets) SetBTC(v string) {
	o.BTC = &v
}

// GetTON returns the TON field value if set, zero value otherwise.
func (o *WalletsCryptoWallets) GetTON() string {
	if o == nil || IsNil(o.TON) {
		var ret string
		return ret
	}
	return *o.TON
}

// GetTONOk returns a tuple with the TON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletsCryptoWallets) GetTONOk() (*string, bool) {
	if o == nil || IsNil(o.TON) {
		return nil, false
	}
	return o.TON, true
}

// HasTON returns a boolean if a field has been set.
func (o *WalletsCryptoWallets) HasTON() bool {
	if o != nil && !IsNil(o.TON) {
		return true
	}

	return false
}

// SetTON gets a reference to the given string and assigns it to the TON field.
func (o *WalletsCryptoWallets) SetTON(v string) {
	o.TON = &v
}

// GetSOL returns the SOL field value if set, zero value otherwise.
func (o *WalletsCryptoWallets) GetSOL() string {
	if o == nil || IsNil(o.SOL) {
		var ret string
		return ret
	}
	return *o.SOL
}

// GetSOLOk returns a tuple with the SOL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletsCryptoWallets) GetSOLOk() (*string, bool) {
	if o == nil || IsNil(o.SOL) {
		return nil, false
	}
	return o.SOL, true
}

// HasSOL returns a boolean if a field has been set.
func (o *WalletsCryptoWallets) HasSOL() bool {
	if o != nil && !IsNil(o.SOL) {
		return true
	}

	return false
}

// SetSOL gets a reference to the given string and assigns it to the SOL field.
func (o *WalletsCryptoWallets) SetSOL(v string) {
	o.SOL = &v
}

func (o WalletsCryptoWallets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletsCryptoWallets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.USDT) {
		toSerialize["USDT"] = o.USDT
	}
	if !IsNil(o.ETH) {
		toSerialize["ETH"] = o.ETH
	}
	if !IsNil(o.BTC) {
		toSerialize["BTC"] = o.BTC
	}
	if !IsNil(o.TON) {
		toSerialize["TON"] = o.TON
	}
	if !IsNil(o.SOL) {
		toSerialize["SOL"] = o.SOL
	}
	return toSerialize, nil
}

type NullableWalletsCryptoWallets struct {
	value *WalletsCryptoWallets
	isSet bool
}

func (v NullableWalletsCryptoWallets) Get() *WalletsCryptoWallets {
	return v.value
}

func (v *NullableWalletsCryptoWallets) Set(val *WalletsCryptoWallets) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletsCryptoWallets) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletsCryptoWallets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletsCryptoWallets(val *WalletsCryptoWallets) *NullableWalletsCryptoWallets {
	return &NullableWalletsCryptoWallets{value: val, isSet: true}
}

func (v NullableWalletsCryptoWallets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletsCryptoWallets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


