/*
test

example

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PointDataRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PointDataRelationships{}

// PointDataRelationships struct for PointDataRelationships
type PointDataRelationships struct {
	Parent *LinksDirect `json:"parent,omitempty"`
	PublishedBy LinksDirect `json:"published_by"`
	Initiative LinksDirect `json:"initiative"`
	Plan LinksDirect `json:"plan"`
}

type _PointDataRelationships PointDataRelationships

// NewPointDataRelationships instantiates a new PointDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPointDataRelationships(publishedBy LinksDirect, initiative LinksDirect, plan LinksDirect) *PointDataRelationships {
	this := PointDataRelationships{}
	this.PublishedBy = publishedBy
	this.Initiative = initiative
	this.Plan = plan
	return &this
}

// NewPointDataRelationshipsWithDefaults instantiates a new PointDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointDataRelationshipsWithDefaults() *PointDataRelationships {
	this := PointDataRelationships{}
	return &this
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *PointDataRelationships) GetParent() LinksDirect {
	if o == nil || IsNil(o.Parent) {
		var ret LinksDirect
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointDataRelationships) GetParentOk() (*LinksDirect, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *PointDataRelationships) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given LinksDirect and assigns it to the Parent field.
func (o *PointDataRelationships) SetParent(v LinksDirect) {
	o.Parent = &v
}

// GetPublishedBy returns the PublishedBy field value
func (o *PointDataRelationships) GetPublishedBy() LinksDirect {
	if o == nil {
		var ret LinksDirect
		return ret
	}

	return o.PublishedBy
}

// GetPublishedByOk returns a tuple with the PublishedBy field value
// and a boolean to check if the value has been set.
func (o *PointDataRelationships) GetPublishedByOk() (*LinksDirect, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishedBy, true
}

// SetPublishedBy sets field value
func (o *PointDataRelationships) SetPublishedBy(v LinksDirect) {
	o.PublishedBy = v
}

// GetInitiative returns the Initiative field value
func (o *PointDataRelationships) GetInitiative() LinksDirect {
	if o == nil {
		var ret LinksDirect
		return ret
	}

	return o.Initiative
}

// GetInitiativeOk returns a tuple with the Initiative field value
// and a boolean to check if the value has been set.
func (o *PointDataRelationships) GetInitiativeOk() (*LinksDirect, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initiative, true
}

// SetInitiative sets field value
func (o *PointDataRelationships) SetInitiative(v LinksDirect) {
	o.Initiative = v
}

// GetPlan returns the Plan field value
func (o *PointDataRelationships) GetPlan() LinksDirect {
	if o == nil {
		var ret LinksDirect
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *PointDataRelationships) GetPlanOk() (*LinksDirect, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *PointDataRelationships) SetPlan(v LinksDirect) {
	o.Plan = v
}

func (o PointDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PointDataRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	toSerialize["published_by"] = o.PublishedBy
	toSerialize["initiative"] = o.Initiative
	toSerialize["plan"] = o.Plan
	return toSerialize, nil
}

func (o *PointDataRelationships) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"published_by",
		"initiative",
		"plan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPointDataRelationships := _PointDataRelationships{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPointDataRelationships)

	if err != nil {
		return err
	}

	*o = PointDataRelationships(varPointDataRelationships)

	return err
}

type NullablePointDataRelationships struct {
	value *PointDataRelationships
	isSet bool
}

func (v NullablePointDataRelationships) Get() *PointDataRelationships {
	return v.value
}

func (v *NullablePointDataRelationships) Set(val *PointDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullablePointDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullablePointDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePointDataRelationships(val *PointDataRelationships) *NullablePointDataRelationships {
	return &NullablePointDataRelationships{value: val, isSet: true}
}

func (v NullablePointDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePointDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


