/*
test

example

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Owner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Owner{}

// Owner struct for Owner
type Owner struct {
	// first name of participant
	FirstName string `json:"first_name"`
	// second name of participant
	SecondName string `json:"second_name"`
	// third name of participant
	ThirdName *string `json:"third_name,omitempty"`
	// name of participant
	DisplayName string `json:"display_name"`
	// position in the company
	Position string `json:"position"`
	// description of participant
	Desc *string `json:"desc,omitempty"`
}

type _Owner Owner

// NewOwner instantiates a new Owner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwner(firstName string, secondName string, displayName string, position string) *Owner {
	this := Owner{}
	this.FirstName = firstName
	this.SecondName = secondName
	this.DisplayName = displayName
	this.Position = position
	return &this
}

// NewOwnerWithDefaults instantiates a new Owner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerWithDefaults() *Owner {
	this := Owner{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *Owner) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *Owner) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *Owner) SetFirstName(v string) {
	o.FirstName = v
}

// GetSecondName returns the SecondName field value
func (o *Owner) GetSecondName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecondName
}

// GetSecondNameOk returns a tuple with the SecondName field value
// and a boolean to check if the value has been set.
func (o *Owner) GetSecondNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecondName, true
}

// SetSecondName sets field value
func (o *Owner) SetSecondName(v string) {
	o.SecondName = v
}

// GetThirdName returns the ThirdName field value if set, zero value otherwise.
func (o *Owner) GetThirdName() string {
	if o == nil || IsNil(o.ThirdName) {
		var ret string
		return ret
	}
	return *o.ThirdName
}

// GetThirdNameOk returns a tuple with the ThirdName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Owner) GetThirdNameOk() (*string, bool) {
	if o == nil || IsNil(o.ThirdName) {
		return nil, false
	}
	return o.ThirdName, true
}

// HasThirdName returns a boolean if a field has been set.
func (o *Owner) HasThirdName() bool {
	if o != nil && !IsNil(o.ThirdName) {
		return true
	}

	return false
}

// SetThirdName gets a reference to the given string and assigns it to the ThirdName field.
func (o *Owner) SetThirdName(v string) {
	o.ThirdName = &v
}

// GetDisplayName returns the DisplayName field value
func (o *Owner) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Owner) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *Owner) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetPosition returns the Position field value
func (o *Owner) GetPosition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *Owner) GetPositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *Owner) SetPosition(v string) {
	o.Position = v
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *Owner) GetDesc() string {
	if o == nil || IsNil(o.Desc) {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Owner) GetDescOk() (*string, bool) {
	if o == nil || IsNil(o.Desc) {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *Owner) HasDesc() bool {
	if o != nil && !IsNil(o.Desc) {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *Owner) SetDesc(v string) {
	o.Desc = &v
}

func (o Owner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Owner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["first_name"] = o.FirstName
	toSerialize["second_name"] = o.SecondName
	if !IsNil(o.ThirdName) {
		toSerialize["third_name"] = o.ThirdName
	}
	toSerialize["display_name"] = o.DisplayName
	toSerialize["position"] = o.Position
	if !IsNil(o.Desc) {
		toSerialize["desc"] = o.Desc
	}
	return toSerialize, nil
}

func (o *Owner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"first_name",
		"second_name",
		"display_name",
		"position",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOwner := _Owner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOwner)

	if err != nil {
		return err
	}

	*o = Owner(varOwner)

	return err
}

type NullableOwner struct {
	value *Owner
	isSet bool
}

func (v NullableOwner) Get() *Owner {
	return v.value
}

func (v *NullableOwner) Set(val *Owner) {
	v.value = val
	v.isSet = true
}

func (v NullableOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwner(val *Owner) *NullableOwner {
	return &NullableOwner{value: val, isSet: true}
}

func (v NullableOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


