/*
test

example

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JarDataRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JarDataRelationships{}

// JarDataRelationships struct for JarDataRelationships
type JarDataRelationships struct {
	Initiative LinkDirect `json:"initiative"`
	Point LinkDirect `json:"point"`
}

type _JarDataRelationships JarDataRelationships

// NewJarDataRelationships instantiates a new JarDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJarDataRelationships(initiative LinkDirect, point LinkDirect) *JarDataRelationships {
	this := JarDataRelationships{}
	this.Initiative = initiative
	this.Point = point
	return &this
}

// NewJarDataRelationshipsWithDefaults instantiates a new JarDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJarDataRelationshipsWithDefaults() *JarDataRelationships {
	this := JarDataRelationships{}
	return &this
}

// GetInitiative returns the Initiative field value
func (o *JarDataRelationships) GetInitiative() LinkDirect {
	if o == nil {
		var ret LinkDirect
		return ret
	}

	return o.Initiative
}

// GetInitiativeOk returns a tuple with the Initiative field value
// and a boolean to check if the value has been set.
func (o *JarDataRelationships) GetInitiativeOk() (*LinkDirect, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initiative, true
}

// SetInitiative sets field value
func (o *JarDataRelationships) SetInitiative(v LinkDirect) {
	o.Initiative = v
}

// GetPoint returns the Point field value
func (o *JarDataRelationships) GetPoint() LinkDirect {
	if o == nil {
		var ret LinkDirect
		return ret
	}

	return o.Point
}

// GetPointOk returns a tuple with the Point field value
// and a boolean to check if the value has been set.
func (o *JarDataRelationships) GetPointOk() (*LinkDirect, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Point, true
}

// SetPoint sets field value
func (o *JarDataRelationships) SetPoint(v LinkDirect) {
	o.Point = v
}

func (o JarDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JarDataRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["initiative"] = o.Initiative
	toSerialize["point"] = o.Point
	return toSerialize, nil
}

func (o *JarDataRelationships) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"initiative",
		"point",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJarDataRelationships := _JarDataRelationships{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJarDataRelationships)

	if err != nil {
		return err
	}

	*o = JarDataRelationships(varJarDataRelationships)

	return err
}

type NullableJarDataRelationships struct {
	value *JarDataRelationships
	isSet bool
}

func (v NullableJarDataRelationships) Get() *JarDataRelationships {
	return v.value
}

func (v *NullableJarDataRelationships) Set(val *JarDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableJarDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableJarDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJarDataRelationships(val *JarDataRelationships) *NullableJarDataRelationships {
	return &NullableJarDataRelationships{value: val, isSet: true}
}

func (v NullableJarDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJarDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


