/*
test

example

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// checks if the WalletsBankAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletsBankAccount{}

// WalletsBankAccount struct for WalletsBankAccount
type WalletsBankAccount struct {
	// monobank account
	Monobank *string `json:"monobank,omitempty"`
	// privat account
	Privat *string `json:"privat,omitempty"`
}

// NewWalletsBankAccount instantiates a new WalletsBankAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletsBankAccount() *WalletsBankAccount {
	this := WalletsBankAccount{}
	return &this
}

// NewWalletsBankAccountWithDefaults instantiates a new WalletsBankAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletsBankAccountWithDefaults() *WalletsBankAccount {
	this := WalletsBankAccount{}
	return &this
}

// GetMonobank returns the Monobank field value if set, zero value otherwise.
func (o *WalletsBankAccount) GetMonobank() string {
	if o == nil || IsNil(o.Monobank) {
		var ret string
		return ret
	}
	return *o.Monobank
}

// GetMonobankOk returns a tuple with the Monobank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletsBankAccount) GetMonobankOk() (*string, bool) {
	if o == nil || IsNil(o.Monobank) {
		return nil, false
	}
	return o.Monobank, true
}

// HasMonobank returns a boolean if a field has been set.
func (o *WalletsBankAccount) HasMonobank() bool {
	if o != nil && !IsNil(o.Monobank) {
		return true
	}

	return false
}

// SetMonobank gets a reference to the given string and assigns it to the Monobank field.
func (o *WalletsBankAccount) SetMonobank(v string) {
	o.Monobank = &v
}

// GetPrivat returns the Privat field value if set, zero value otherwise.
func (o *WalletsBankAccount) GetPrivat() string {
	if o == nil || IsNil(o.Privat) {
		var ret string
		return ret
	}
	return *o.Privat
}

// GetPrivatOk returns a tuple with the Privat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletsBankAccount) GetPrivatOk() (*string, bool) {
	if o == nil || IsNil(o.Privat) {
		return nil, false
	}
	return o.Privat, true
}

// HasPrivat returns a boolean if a field has been set.
func (o *WalletsBankAccount) HasPrivat() bool {
	if o != nil && !IsNil(o.Privat) {
		return true
	}

	return false
}

// SetPrivat gets a reference to the given string and assigns it to the Privat field.
func (o *WalletsBankAccount) SetPrivat(v string) {
	o.Privat = &v
}

func (o WalletsBankAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletsBankAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Monobank) {
		toSerialize["monobank"] = o.Monobank
	}
	if !IsNil(o.Privat) {
		toSerialize["privat"] = o.Privat
	}
	return toSerialize, nil
}

type NullableWalletsBankAccount struct {
	value *WalletsBankAccount
	isSet bool
}

func (v NullableWalletsBankAccount) Get() *WalletsBankAccount {
	return v.value
}

func (v *NullableWalletsBankAccount) Set(val *WalletsBankAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletsBankAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletsBankAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletsBankAccount(val *WalletsBankAccount) *NullableWalletsBankAccount {
	return &NullableWalletsBankAccount{value: val, isSet: true}
}

func (v NullableWalletsBankAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletsBankAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


